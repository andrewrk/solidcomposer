#!/bin/bash

######### variables #######
LIVE_CODE="/home/andy/apps/solidcomposer"
TEST_CODE="/home/andy/apps/test-solidcomposer"
MIGRATE_CODE="/home/andy/apps/migrate-solidcomposer"

######### initial checking before deploying #########
echo "====== CHECKING ======="
# stop on any error
set -e

# git the live code revision
cd $LIVE_CODE
LIVE_REV=$(git rev-parse HEAD)

# update the test code to the newest release
echo "Updating the test code base..."
cd $TEST_CODE
git pull

# ensure that all dependencies are installed on server
echo "Checking python module dependencies..."
MISSING=$(python deps.py)
if [ -n "$MISSING" ]; then
    echo "FAILURE: missing dependencies on the server:";
    echo "$MISSING";
    exit 1;
fi

# test the migrations
echo "Testing migrations."
cd $LIVE_CODE
echo "Generating fixtures from live database..."
python manage.py dumpdata >$MIGRATE_CODE/dump.json --exclude=contenttypes

echo "Updating migrate code to live code revision..."
cd $MIGRATE_CODE
git checkout release
git pull
git checkout $LIVE_REV

echo "Resetting the test database..."
sudo -u postgres dropdb solidcomposer-test
sudo -u postgres createdb solidcomposer-test
python manage.py syncdb --noinput

echo "Migrating the test database to the live database state..."
python manage.py migrate

# install fixtures from the server
echo "Installing fixtures from the live database..."
python manage.py loaddata dump.json

# ok now we can use the new code
echo "Updating the migration code base to the newest version..."
git checkout release
git pull

# migrate to the latest migration
# (this makes sure the server won't fail when migrating)
echo "Migrating the test database to the latest version..."
python manage.py migrate

# prepare to run test suite
cd $TEST_CODE
echo "Preparsing javascript for tests..."
python preparser.py parse

# run test suite locally
echo "Running test suite..."
python manage.py test

######### deploy steps ###############
echo
echo "===== DEPLOYING ======="

cd $LIVE_CODE

# update code
echo "Updating code..."
git pull

# run parser
echo "Parsing javascript and scss..."
python preparser.py parse

# synchronize media with amazon s3
echo "Synchronizing media with Amazon S3"
python syncmedia.py

# turn off server while we update code
echo "Stopping server..."
sudo -u root /etc/init.d/apache2 stop

# migrate database
echo "Migrating database..."
python manage.py migrate

echo "Synchronizing daw module capabilities..."
python syncdaw.py

# turn server back on 
echo "Starting server..."
sudo -u root /etc/init.d/apache2 start

echo
echo "===== SUCCESS ======="
