#!/bin/bash

# TODO: synchronize media with amazon s3
# TODO: make sure the wsgi process has permission to access the django project

URL="http://solidcomposer.com/"
SSH="web" # the ssh connection to make (here I am using one from .ssh/config)
REMOTE_TMP="/home/superjoe/temp"
INSTALL_PATH="/home/superjoe/django_code"

######### initial checking before deploying #########
PRJ_PATH="$INSTALL_PATH/solidcomposer"
# crash if any program has error status code
set -e

# ensure that all dependencies are installed on client
# (necessary for testing)
echo "Checking dependencies on this machine..."
MISSING=$(python deps.py)
if [ -n "$MISSING" ]; then
    echo "cannot continue, missing dependencies on deploying machine:";
    echo "$MISSING";
    exit 1;
fi

# ensure that all dependencies are installed on server
echo "Copying dependency script to server..."
scp deps.py $SSH:$PRJ_PATH/deps.py
echo "Checking dependencies on server..."
MISSING=$(ssh $SSH "source .bashrc; cd $PRJ_PATH; python deps.py")
if [ -n "$MISSING" ]; then
    echo "cannot continue, missing dependencies on the server:";
    echo "$MISSING";
    exit 1;
fi

# the folder that contains this script
WORKING="$(pwd)/$(dirname \"$0\")"
cd $WORKING

# test the migrations
# export the old git revision to a temp folder
echo "Getting old version hash from server..."
OLDHASH=$(ssh $SSH "source .bashrc; cd $PRJ_PATH; cat deploy_revision;")
OLD=$(mktemp -d)/solidcomposer
mkdir $OLD

git archive $OLDHASH | tar -x -C $OLD
if [ -f $WORKING/settings_user.py ]; then
    cp $WORKING/settings_user.py $OLD/
fi
cd $OLD

echo "Generating fixtures on the server..."
ssh $SSH "source .bashrc; cd $PRJ_PATH; python manage.py dumpdata --exclude=contenttypes >dump.json"
echo "Transferring fixtures from the server..."
scp $SSH:$PRJ_PATH/dump.json ./

# reset the client database
echo "Resetting the client database..."
python $WORKING/resetdb.py
python manage.py syncdb --noinput

echo "Migrating the client to the server's state..."
python manage.py migrate

# install fixtures from the server
echo "Installing fixtures from the server..."
python manage.py loaddata dump.json

# ok now we can use the new code
cd $WORKING
# migrate to the latest migration
# (this makes sure the server won't fail when migrating)
echo "Migrating the client to the latest version..."
python manage.py migrate

echo "Preparsing javascript for tests..."
python preparser.py parse

# run test suite locally
echo "Running test suite locally..."
python manage.py test

######## update the server ############
echo 
echo "== All Tests Passed =="
echo

NEWHASH=$(git log --pretty="%H" -n 1)
CMD=""
# copy django code to server
echo "Copying django code to server..."
rsync -avz --exclude-from "$WORKING/.gitignore" $WORKING $SSH:$PRJ_PATH/

# make sure database is migrated to latest version
CMD="$CMD source .bashrc;"
CMD="$CMD cd $PRJ_PATH;"
CMD="$CMD echo \"$NEWHASH\" >deploy_revision;"
CMD="$CMD python manage.py migrate;"
# preparser
CMD="$CMD python preparser.py parse;"
# run tests
CMD="$CMD python manage.py test;"
# reset django daemon
CMD="$CMD killall django.fcgi;"

echo "Migrating, preparsing, testing, and refreshing Django..."
ssh $SSH $CMD
echo "Getting home page to force django to get loaded..."
wget $URL -O $(mktemp) -q

echo "== Deploy Success =="
echo
